input {
    # YOUR INPUT
}

filter {
    if "PAN-Syslog" in [tags] {
	
	# Log types are "TRAFFIC", "THREAT", "CONFIG" and "SYSTEM". URL & Wildfire logs are inside Threat logs
    # Log fields: https://www.paloaltonetworks.com/documentation/80/pan-os/pan-os/monitoring/syslog-field-descriptions

        if "TRAFFIC" in [message] {
            csv {
                source => "message"
                columns => [
                    "FUTURE_USE", "ReceiveTime", "SerialNumber", "Type", "Threat_Content Type", "FUTURE_USE", "GeneratedTime",
                    "SourceIP", "DestinationIP", "NATSourceIP", "NATDestinationIP", "RuleName",
                    "SourceUser", "DestinationUser", "Application", "VirtualSystem", "SourceZone", "DestinationZone", "InboundInterface",
                    "OutboundInterface", "LogAction", "FUTURE_USE", "SessionID", "RepeatCount", "SourcePort", "DestinationPort", "NATSourcePort",
                    "NATDestinationPort", "Flags", "Protocol", "Action", "Bytes", "BytesSent", "BytesReceived",
                    "Packets", "StartTime", "ElapsedTime", "Category", "FUTURE_USE", "SequenceNumber", "ActionFlags", "SourceLocation", "DestinationLocation",
                    "FUTURE_USE", "PacketsSent", "PacketsReceived", "SessionEndReason", "DeviceGroupHierarchyLevel1", "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3",
                    "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName", "ActionSource", "SourceVMUUID", "DestinationVMUUID", "TunnelID_IMSI", "MonitorTag_IMEI",
                    "ParentSessionID", "ParentStartTime", "TunnelType", "SCTPAssociationID", "SCTPChunks", "SCTPChunksSent", "SCTPChunksReceived", "UUIDforrule", "HTTP_2Connection"
                ]
            }

            mutate {
                convert => [ "Bytes", "integer" ]
                convert => [ "BytesReceived", "integer" ]
                convert => [ "BytesSent", "integer" ]
                convert => [ "ElapsedTime", "integer" ]
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
                convert => [ "NATDestinationPort", "integer" ]
                convert => [ "NATSourcePort", "integer" ]
                convert => [ "Packets", "integer" ]
                convert => [ "PacketsReceived", "integer" ]
                convert => [ "PacketsSent", "integer" ]
                convert => [ "SequenceNumber", "integer" ]
                
                add_tag => [ "PAN-Traffic"]
            }

            date {
                match => ["GeneratedTime", "YYYY/MM/dd HH:mm:ss"]
                timezone => "UTC"
                target => "eventDateTime"
            }
        }


        else if "THREAT" in [message] {
            csv {
                source => "message"
                columns => [ 
                    "FUTURE_USE", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType", "FUTURE_USE",
                    "GeneratedTime", "SourceIP", "DestinationIP", "NATSourceIP", "NATDestinationIP", "RuleName", 
                    "SourceUser", "DestinationUser", "Application", "VirtualSystem", "SourceZone",
                    "DestinationZone", "InboundInterface", "OutboundInterface", "LogAction", "FUTURE_USE", "SessionID",
                    "RepeatCount", "SourcePort", "DestinationPort", "NATSourcePort", "NATDestinationPort", "Flags", "Protocol",
                    "Action", "URL_Filename", "ThreatID", "Category", "Severity", "Direction", "SequenceNumber",
                    "ActionFlags", "SourceLocation", "DestinationLocation", "FUTURE_USE", "ContentType", "PCAP_ID", "FileDigest",
                    "Cloud", "URLIndex", "UserAgent", "FileType", "X-Forwarded-For", "Referer", "Sender", "Subject", "Recipient",
                    "ReportID", "DeviceGroupHierarchyLevel1", "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3",
                    "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName", "FUTURE_USE", "SourceVMUUID", "DestinationVMUUID",
                    "HTTPMethod", "TunnelID_IMSI", "MonitorTag_IMEI",
                    "ParentSessionID", "ParentStartTime", "TunnelType", "ThreatCategory",
                    "ContentVersion", "FUTURE_USE", "SCTPAssociationID", "PayloadProtocolID", "HTTPHeaders",
                    "URLCategoryList", "UUIDforrule", "HTTP_2Connection"
                ]
            }

            mutate {
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
                convert => [ "NATDestinationPort", "integer" ]
                convert => [ "NATSourcePort", "integer" ]
                convert => [ "SequenceNumber", "integer" ]
      
                add_tag => ["PAN-Threat"]
            }

            date {
                match => ["GeneratedTime", "YYYY/MM/dd HH:mm:ss"]
                timezone => "UTC"
                target => "eventDateTime"
            }
        }

	else if [message] =~ "globalprotectgateway*" {
    # pipeline for VPN message, is not the best with the fields but works and is more easy search asignements for vpn users.
	    csv {
            source => "message"
            columns => [
                "FUTURE_USE", "ReceiveTime", "SerialNumber", "Type", "Content_ThreatType", "FUTURE_USE", "GeneratedTime", "VirtualSystem", "EventID",
                "Object", "FUTURE_USE", "FUTURE_USE", "Module", "Severity", "Description", "SequenceNumber", "ActionFlags", "DeviceGroupHierarchyLevel1",
                "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3", "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName"
            ]
	    }
        kv {
            target => "Description"
            field_split => ","
            value_split => ":"
            }

	    mutate {
                add_tag => [ "PAN-VPN"]
            }

        date {
            match => ["GeneratedTime", "YYYY/MM/dd HH:mm:ss"]
            timezone => "UTC"
            target => "eventDateTime"
            }            
        }

	else if "CONFIG" in [message] {
	    csv {
            source => "message"
            columns => [
                "FUTURE_USE", "ReceiveTime", "SerialNumber", "Type", "Subtype", "FUTURE_USE", "GeneratedTime", "Host",
                "VirtualSystem", "Command", "Admin", "Client", "Result", "ConfigurationPath", "BeforeChangeDetail", "AfterChangeDetail",
                "SequenceNumber", "ActionFlags", "DeviceGroupHierarchyLevel1", "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3",
                "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName"
		    ]
	    }

	    mutate {
                add_tag => [ "PAN-Config"]
            }
            
        date {
            match => ["GeneratedTime", "YYYY/MM/dd HH:mm:ss"]
            timezone => "UTC"
            target => "eventDateTime"
            }
        }

	else if "SYSTEM" in [message] {
	    csv {
            source => "message"
            columns => [
                "FUTURE_USE", "ReceiveTime", "SerialNumber", "Type", "Content_ThreatType", "FUTURE_USE", "GeneratedTime", "VirtualSystem", "EventID",
                "Object", "FUTURE_USE", "FUTURE_USE", "Module", "Severity", "Description", "SequenceNumber", "ActionFlags", "DeviceGroupHierarchyLevel1",
                "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3", "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName"
            ]
	    }

	    mutate {
                add_tag => [ "PAN-System"]
            }

        date {
            match => ["GeneratedTime", "YYYY/MM/dd HH:mm:ss"]
            timezone => "UTC"
            target => "eventDateTime"
        }
        }

        mutate {
            # Remove message because has been fully parsed.
            remove_field => [ "message" ]
        }

        # Geolocate logs that have SourceIP if that SourceIP is a non-RFC1918 address
        if [SourceIP] and [SourceIP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
               source => "SourceIP"
               target => "SourceIPGeo"
          }

            # Delete 0,0 in SourceIPGeo.location if equal to 0,0
            if ([SourceIPGeo.location] and [SourceIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "SourceIPGeo.location", "" ]
                }
            }
        }

        # Geolocate logs that have DestinationIP and if that DestinationIP is a non-RFC1918 address
        if [DestinationIP] and [DestinationIP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "DestinationIP"
                target => "DestinationIPGeo"
            }
      
            # Delete 0,0 in DestinationIPGeo.location if equal to 0,0
            if ([DestinationIPGeo.location] and [DestinationIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "DestinationIPGeo.location", "" ]
                }
            }
        }

        # Takes source address, source port, destination address, destination port, and protocol and does a SHA1 hash to fingerprint the flow
        if [SourceIP] and [DestinationIP] {
            fingerprint {
                concatenate_sources => true
                method => "SHA1"
                key => "logstash"
                source => [ "SourceIP", "SourcePort", "DestinationIP", "DestinationPort", "Protocol" ]
            }
        }
        
        if [URL_Filename] == "" {
            mutate {
                remove_field => "URL_Filename"
                add_tag => [ "empty_file" ]
            }
        }

    }
}

output {

    if "PAN-Traffic" in [tags] {
      elasticsearch {
          index => "pan-traffic-%{+YYYY-MM-dd}"
      }
    }

    else if "PAN-Threat" in [tags] {
      elasticsearch {
          index => "pan-threat-%{+YYYY-MM-dd}"
      }
    }

    else if "PAN-Config" in [tags] {
      elasticsearch {
          index => "pan-config-%{+YYYY-MM-dd}"
      }
    }

    else if "PAN-System" in [tags] {
      elasticsearch {
          index => "pan-system-%{+YYYY-MM-dd}"
      }
    }

    else if "PAN-VPN" in [tags] {
      elasticsearch {
          index => "pan-vpn-%{+YYYY-MM-dd}"
      }
    }

}
