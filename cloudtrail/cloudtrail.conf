input {
    # YOUR INPUT
}

filter {
    geoip {
     source => "[sourceIPAddress]"
     target => "[source][geo]"
     add_tag => [ "cloudtrail-geoip" ]
  }
    translate {
    # translate the coount ID to account name 
    # useful if you have multiple aws-cloud accounts
     field => "[recipientAccountId]"
     destination => "[cloud][account][name]"
     dictionary_path => 'accounts_mapping.csv'
     refresh_interval => '1000'
  }
    mutate {
     rename => { "[eventVersion]" => "[aws][cloudtrail][event_version]"}
     rename => { "[userIdentity][type]" => "[aws][cloudtrail][user_identity][type]"}
     rename => { "[userIdentity][userName]" => "[user][name]"}
     rename => { "[userIdentity][principalId]" => "[user][id]"}
     rename => { "[userIdentity][arn]" => "[aws][cloudtrail][user_identity][arn]"}
     rename => { "[userIdentity][accountId]" => "[cloud][account][id]"}
     rename => { "[userIdentity][accessKeyId]" => "[aws][cloudtrail][user_identity][access_key_id]"}
     rename => { "[userIdentity][sessionContext][attributes][mfaAuthenticated]" => "[aws][cloudtrail][user_identity][session_context][mfa_authenticated]"}
     rename => { "[userIdentity][sessionContext][attributes][creationDate]" => "[aws][cloudtrail][user_identity][session_context][creation_date]"}
     rename => { "[userIdentity][sessionContext][sessionIssuer][userName]" => "[user][name]"}
     rename => { "[userIdentity][invokedBy]" => "[aws][cloudtrail][user_identity][invoked_by]"}
     rename => { "[eventSource]" => "[event][provider]"}
     rename => { "[awsRegion]" => "[cloud][region]"}
     rename => { "[sourceIPAddress]" => "[source][address]"}
     rename => { "[userAgent]" => "[user_agent]"}
     rename => { "[errorCode]" => "[aws][cloudtrail][errorCode]"}
     rename => { "[errorMessage]" => "[aws][cloudtrail][errorMessage]"}
     rename => { "[eventID]" => "[event][id]"}
   }
    grok {
        match => {
            "[source][address]" => "%{IP:source.ip}"
            }
    }
}

output {
    # YOUR OUTPUT
}