input {
    # YOUR INPUT
}

filter {
    grok  {
        match => ["message", "%{NUMBER:version:int} %{NUMBER:cloud.account.id} %{NOTSPACE:interface_id} %{NOTSPACE:source.ip} %{NOTSPACE:destination.ip} %{NOTSPACE:source.port:int} %{NOTSPACE:destination.port:int} %{NOTSPACE:network.iana_number:int} %{NOTSPACE:source.packets:int} %{NOTSPACE:source.bytes:int} %{NUMBER:event.start:timestamp} %{NUMBER:@timestamp:timestamp} %{NOTSPACE:action} %{NOTSPACE:log_status}"]
    }

    if [srcaddr] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
        geoip {
            source => "source.ip"
            target => "source.geo"
        }
    }

    if [dstaddr] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
        geoip {
            source => "destination.ip"
            target => "destination.geo"
        }
    }
    mutate {
        copy => {
            "@timestamp" => "event.end" 
            }
        add_field => {
            "cloud.provider" => "aws" 
            }
    }
    date {
        match => [ "event.end" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    date {
        match => [ "event.start" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    translate {
        # translate the coount ID to account name 
        # useful if you have multiple aws-cloud accounts
        field => "cloud.account.id"
        destination => "cloud.account.name"
        dictionary_path => 'accounts_mapping.csv'
        refresh_interval => '1000'
    }
}

output {
    # YOUR OUTPUT
}
